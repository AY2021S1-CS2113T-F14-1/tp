@startuml
 -> ":CommandDelEventAttendance": execute()

activate ":CommandDelEventAttendance"
":CommandDelEventAttendance" -> ":EventList" : deleteAttendance()
activate ":EventList"

opt event does not exist
":EventList" -> ":EventList" : checkEventExistence()
":EventList" --> ":CommandDelEventAttendance" : output
<-- ":CommandDelEventAttendance" : output
end

":EventList" -> ":EventList" : findEventByName()

opt member does not exist
activate ":MemberList"
":EventList" -> ":MemberList" : checkMemberExistence()
":MemberList" -> ":Event" : getEventParticipants()
activate ":Event"
return
":MemberList" --> ":EventList"
":EventList" --> ":CommandDelEventAttendance" : output
<-- ":CommandDelEventAttendance" : output
end

activate ":MemberList"
":EventList" -> ":MemberList" : findMemberIndex()
":MemberList" -> ":Event" : getEventParticipants()
activate ":Event"
return index
":MemberList" --> ":EventList" :index
deactivate ":MemberList"
":EventList" -> ":Event" : getEventParticipants()
activate ":Event"
":Event" -> ":Event" : get()
return getMemberName()

":EventList" -> ":Event" : getEventParticipants()
activate ":Event"
":Event" -> ":Event" : remove()
return output

":EventList" -> ":Event" : eventParticipants
activate ":Event"
":Event" -> ":Event" : size()
return output

deactivate ":Event"


":EventList" --> ":CommandDelEventAttendance" : output
deactivate ":EventList"
<-- ":CommandDelEventAttendance" : output
deactivate ":CommandDelEventAttendance"




@enduml